# 3) Реализовать программу работы с органическими клетками, состоящими
# из ячеек. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (​ __add__()​ ), вычитание (​ __sub__()),умножение (​ __mul__()​ ),
# деление (​__truediv__()​ ). Данные методы должны применяться ​ только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное
# (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только
# если разность количества ячеек двух клеток больше нуля, иначе выводить
# соответствующее сообщение.
# Умножение. Создается общая клетка из двух.Число ячеек общей клетки
# определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.Число ячеек общей клетки
# определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод ​ make_order(), принимающий экземпляр
# класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****​ ..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает,
# то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() ​ вернет строку: ​ *****\n*****\n**​.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() ​ вернет строку: ​ *****\n*****\n*****​ .

class Cell():
    def __init__(self, cells):
        self.cells = int(cells)

    def __add__(self, other):
        return Cell(self.cells + other.cells)


    def __sub__(self, other):
        if self.cells > other.cells:
            return Cell(self.cells - other.cells)
        else:
            print('You cannot subtract a larger number from a smaller one.\n'
                  'Change the cell count values and try again.')

    def __mul__(self, other):
        return Cell(self.cells * other.cells)

    def __floordiv__(self, other):
        if self.cells > other.cells:
            return Cell(self.cells // other.cells)
        else:
            print('You cannot divide a smaller number into a larger one.\n'
                  'Change the cell count values and try again.')

    def __str__(self):
        return self.cells * '[]'

    def make_order(self,cell_range):
        line = self.cells // cell_range
        last = self.cells % cell_range
        print((f'{cell_range * "[]"} \n') * line,end='')
        print((f'{last * "[]"}'))


c_1 = Cell(12)
c_2 = Cell(9)
# print(c_1)
# print(c_2)
# print(c_1 + c_2)
# print(c_1 - c_2)
# print(c_1 // c_2)
c_2.make_order(4)

